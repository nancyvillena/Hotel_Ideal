/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelideal.Vistas;

import hotelideal.Conexion;
import hotelideal.Huesped;
import hotelideal.HuespedData;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nancy
 */
public class RegistrarHuesped extends javax.swing.JInternalFrame {
    
    
    private String nombre, domicilio,correo;
    private int dni;
    private long celular;
    private int id;
    private HuespedData huespedData;
    private Conexion conexion;
     ArrayList<Huesped> listaHuespedes;
    DefaultTableModel modelo;

    /**
     * Creates new form RegistrarHueped
     */
    public RegistrarHuesped() {
       
   
    
        try {
            initComponents();
            conexion=new Conexion("jdbc:mysql://localhost/hotelideal","root","");
            huespedData=new HuespedData(conexion);
            modelo=new DefaultTableModel();
            listaHuespedes=(ArrayList)huespedData.obtenerHuespedes();
            armaCabezeraTabla();
            cargaDatos();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RegistrarHuesped.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    
    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jtDomicilio = new javax.swing.JTextField();
        jtCorreo = new javax.swing.JTextField();
        jtDni = new javax.swing.JTextField();
        jtCelular = new javax.swing.JTextField();
        jbGuardar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbLimpiar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtRegHuesped = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setText("REGISTRAR HUESPED");

        jLabel2.setText("NOMBRE");

        jLabel3.setText("DOMICILIO");

        jLabel4.setText("CORREO");

        jLabel5.setText("DNI");

        jLabel6.setText("CELULAR");

        jtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtNombreActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbActualizar.setText("Actualizar ");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbLimpiar.setText("Limpiar");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jtRegHuesped.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtRegHuesped);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtDomicilio)
                                    .addComponent(jtNombre)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtCorreo)
                                    .addComponent(jtDni)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(jbBorrar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                                        .addComponent(jbLimpiar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jtCelular))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbGuardar)
                        .addGap(54, 54, 54)
                        .addComponent(jbActualizar)
                        .addGap(64, 64, 64)
                        .addComponent(jbBuscar)))
                .addContainerGap(53, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbActualizar)
                    .addComponent(jbBuscar)
                    .addComponent(jbBorrar)
                    .addComponent(jbLimpiar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtNombreActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here:
        
         nombre=jtNombre.getText();
        dni=Integer.parseInt(jtDni.getText());
        domicilio=jtDomicilio.getText();
        correo=jtCorreo.getText();
        celular= Long.parseLong(jtCelular.getText());

        //CREACCION DE UN NUEVO HUESPED Y LLAMADA AL METODO guardarHuesped()
        Huesped huesped=new Huesped(nombre,dni,domicilio,correo,celular);
        huespedData.guardarHuesped(huesped);
        JOptionPane.showMessageDialog(null, "Se Guardo Correctamente!!!");

        //LIMPIAR CASILLAS DE TEXTO
        jtNombre.setText(""); jtDni.setText(""); jtDomicilio.setText("");
        jtCorreo.setText(""); jtCelular.setText("");
        listaHuespedes=(ArrayList)huespedData.obtenerHuespedes();
        cargaDatos();
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
         nombre=jtNombre.getText();
        dni=Integer.parseInt(jtDni.getText());
        domicilio=jtDomicilio.getText();
        correo=jtCorreo.getText();
        celular= Long.parseLong(jtCelular.getText());

        // CREACCION DE UN NUEVO HUESPED Y LLAMADA AL METODO actualizarHuesped()
        if (!nombre.equalsIgnoreCase("")){
            Huesped huesped=new Huesped(id,nombre,dni,domicilio,correo,celular);
            huespedData.actualizarHuesped(huesped);
            JOptionPane.showMessageDialog(null, "Se Actualizo Correctamente!!!");
        }
        // LIMPIAR CASILLAS DE TEXTO
        jtNombre.setText(""); jtDni.setText(""); jtDomicilio.setText("");
        jtCorreo.setText(""); jtCelular.setText("");

        // Se bloquean los botones actualizar y borrar
        jbActualizar.setEnabled(false);
        jbBorrar.setEnabled(false);
        listaHuespedes=(ArrayList)huespedData.obtenerHuespedes();
        cargaDatos();
        
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        // TODO add your handling code here:
        String dniBuscar=JOptionPane.showInputDialog("Ingrese DNI del Huesped");
        if(dniBuscar!=null){
            int dni=Integer.parseInt(dniBuscar);
            Huesped huesped=huespedData.buscarHuespedXDni(dni);
            if(huesped!=null){
                //Se activa los botones actualizar y borrar
                jbActualizar.setEnabled(true);
                jbBorrar.setEnabled(true);

                //TRASPASO DE VARIABLES
                jtNombre.setText(huesped.getNombre());
                jtDni.setText(huesped.getDni()+"");
                jtDomicilio.setText(huesped.getDomicilio());
                jtCorreo.setText(huesped.getCorreo());
                jtCelular.setText(huesped.getCelular()+"");
                id=huesped.getId_huesped();
            }else{JOptionPane.showMessageDialog(null, "DNI no Encontrado...");}
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        
        int confirma=JOptionPane.showConfirmDialog(rootPane, "Seguro que desea borrar");
        if (confirma==0){
            int dni=Integer.parseInt(jtDni.getText());
            huespedData.borrarHuespedXDni(dni);

            //LIMPIAR CASILLAS DE TEXTO
            jtNombre.setText(""); jtDni.setText(""); jtDomicilio.setText("");
            jtCorreo.setText(""); jtCelular.setText("");

            // Se bloquean los botones actualizar y borrar
            jbActualizar.setEnabled(false);
            jbBorrar.setEnabled(false);
            listaHuespedes=(ArrayList)huespedData.obtenerHuespedes();
            cargaDatos();
        }
        
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        // TODO add your handling code here:
        jtNombre.setText("");
        jtDomicilio.setText("");
        jtCorreo.setText("");
        jtDni.setText("");
        jtCelular.setText("");
        
        
        
    }//GEN-LAST:event_jbLimpiarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JTextField jtCelular;
    private javax.swing.JTextField jtCorreo;
    private javax.swing.JTextField jtDni;
    private javax.swing.JTextField jtDomicilio;
    private javax.swing.JTextField jtNombre;
    private javax.swing.JTable jtRegHuesped;
    // End of variables declaration//GEN-END:variables

    private void armaCabezeraTabla() {
       
        
      ArrayList<Object> columnas=new ArrayList<>();
        
        columnas.add("Nombre");
        columnas.add("DNI");
        columnas.add("Domicilio");
        columnas.add("Correo");
        columnas.add("Celular");
        
        for (Object it:columnas){
            modelo.addColumn(it);
        }
        jtRegHuesped.setModel(modelo);
        }
        
        public void borraFilasTabla(){
            int a =modelo.getRowCount()-1;
            for(int i=a;i>=0;i--){
                modelo.removeRow(i);
            }
        }

//To change body of generated methods, choose Tools | Templates.
    

    private void cargaDatos() {
        borraFilasTabla();
            for (Huesped m:listaHuespedes){
                modelo.addRow(new Object[]{m.getNombre(),m.getDni(),m.getDomicilio(),m.getCorreo(),m.getCelular()});
            }
    }
}
